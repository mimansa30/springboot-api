package org.processorchestrator.config;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@Component
@Configuration
@ConfigurationProperties(prefix = "po")
public class BoxConfiguration implements InitializingBean {

    private Map<String, EnvProperties> dev = new HashMap<>();
    private Map<String, EnvProperties> qa = new HashMap<>();

    @Override
    public void afterPropertiesSet() throws Exception {
        log.info("Properties loaded:");
        dev.forEach((key, value) -> log.info("Dev Property: Key: {}, Value: {}", key, value));
        qa.forEach((key, value) -> log.info("QA Property: Key: {}, Value: {}", key, value));
    }

    public EnvProperties getEnvProperties(String region, String environment, String box) {
        String prefix = environment + "." + region.toLowerCase() + "." + box;
        return findMatchingProperty(prefix);
    }

    private EnvProperties findMatchingProperty(String prefix) {
        if (dev.containsKey(prefix)) {
            return dev.get(prefix);
        } else if (qa.containsKey(prefix)) {
            return qa.get(prefix);
        } else {
            return null;
        }
    }

    public void setDev(Map<String, EnvProperties> dev) {
        this.dev = dev;
    }

    public void setQa(Map<String, EnvProperties> qa) {
        this.qa = qa;
    }
}

@Data
public class EnvProperties {
    private String hostname;
    private String user;
    private String scriptPath;
    private String box;
}
