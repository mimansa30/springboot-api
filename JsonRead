package org.controllers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jcraft.jsch.JSchException;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.annotation.PostConstruct;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/services")
public class ServiceController {

    private List<ServiceInfo> services;

    @PostConstruct
    public void init() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        services = Arrays.asList(mapper.readValue(new File("path/to/ServiceData.json"), ServiceInfo[].class));
    }

    @PostMapping(value = "/getServiceByName", consumes = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, String> getServiceByName(@RequestBody String name) {
        Optional<ServiceInfo> serviceInfo = services.stream()
                .filter(service -> service.getService().equals(name))
                .findFirst();
        
        if (serviceInfo.isPresent()) {
            return Map.of(
                "box", serviceInfo.get().getBox(),
                "serviceName", serviceInfo.get().getService(),
                "startCommand", serviceInfo.get().getStartCommand(),
                "host", serviceInfo.get().getHost(),
                "password", serviceInfo.get().getPassword()
            );
        } else {
            return Map.of();
        }
    }

    @PostMapping(value = "/startService", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> startService(@RequestBody ApiRequest apiRequest) throws JSchException, InterruptedException {
        Optional<ServiceInfo> serviceInfo = services.stream()
                .filter(service -> service.getService().equals(apiRequest.getServiceName()))
                .findFirst();

        if (serviceInfo.isPresent()) {
            ServiceInfo info = serviceInfo.get();
            boolean success = executeCommandViaSSH(info.getUser(), info.getPassword(), info.getHost(), info.getStartCommand());

            if (success) {
                return ResponseEntity.ok("Service started successfully");
            } else {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to start service");
            }
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Service not found");
        }
    }

    private boolean executeCommandViaSSH(String user, String password, String host, String command) throws JSchException, InterruptedException {
        // Implement SSH logic here
        return sshConnection.executeCommand(user, password, host, command);
    }
}
