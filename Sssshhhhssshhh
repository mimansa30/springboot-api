package org.controllers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jcraft.jsch.JSchException;
import org.example.SshConnection;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.annotation.PostConstruct;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/services")
public class ServiceController {

    private List<Map<String, String>> services;
    private SshConnection sshConnection = new SshConnection();

    @PostConstruct
    public void init() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        services = Arrays.asList(mapper.readValue(new File("path/to/ServiceData.json"), Map[].class));
    }

    @PostMapping(value = "/startService", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<String> startService(@RequestBody Map<String, String> requestBody) throws JSchException, InterruptedException {
        String serviceName = requestBody.get("service");
        
        Optional<Map<String, String>> serviceInfo = services.stream()
                .filter(service -> service.get("service").equals(serviceName))
                .findFirst();

        if (serviceInfo.isPresent()) {
            Map<String, String> info = serviceInfo.get();
            String host = info.get("host");
            String password = info.get("password");
            String startCommand = info.get("startCommand");
            boolean success = executeCommandViaSSH(host, password, startCommand);

            if (success) {
                return ResponseEntity.ok("Service started successfully");
            } else {
                return ResponseEntity.status(500).body("Failed to start service");
            }
        } else {
            return ResponseEntity.status(404).body("Service not found");
        }
    }

    private boolean executeCommandViaSSH(String host, String password, String command) throws JSchException, InterruptedException {
        // Implement SSH logic here
        return sshConnection.executeCommand(host, password, command);
    }
}
